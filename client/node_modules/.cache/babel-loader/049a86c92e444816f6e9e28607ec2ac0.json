{"ast":null,"code":"import _toConsumableArray from\"C:/Users/rober/UCIBootCamp/redux-store/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:/Users/rober/UCIBootCamp/redux-store/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useReducer}from'react';import{UPDATE_PRODUCTS,ADD_TO_CART,UPDATE_CART_QUANTITY,REMOVE_FROM_CART,ADD_MULTIPLE_TO_CART,UPDATE_CATEGORIES,UPDATE_CURRENT_CATEGORY,CLEAR_CART,TOGGLE_CART}from'./actions';// TODO: To get a better understand of how a reducer works - add comments to the various actions in the reducer\nexport var reducer=function reducer(state,action){switch(action.type){// TODO: Add a comment describing the functionality of the UPDATE_PRODUCTS case\n// Your comment here\n//updates products variable to append a product to the list\ncase UPDATE_PRODUCTS:return _objectSpread(_objectSpread({},state),{},{products:_toConsumableArray(action.products)});case ADD_TO_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:true,cart:[].concat(_toConsumableArray(state.cart),[action.product])});case ADD_MULTIPLE_TO_CART:return _objectSpread(_objectSpread({},state),{},{cart:[].concat(_toConsumableArray(state.cart),_toConsumableArray(action.products))});// TODO: Add a comment describing the functionality of the UPDATE_CART_QUANTITY case\n// Your comment here\n//goes through the products in the cart and updates the quantity based on action.purchaseQuantity\ncase UPDATE_CART_QUANTITY:return _objectSpread(_objectSpread({},state),{},{cartOpen:true,cart:state.cart.map(function(product){if(action._id===product._id){product.purchaseQuantity=action.purchaseQuantity;}return product;})});// TODO: Add a comment describing the functionality of the REMOVE_FROM_CART case\n// Your comment here\n// go through state.cart.filter and return a new list and set state.cart equal to that new list of products\ncase REMOVE_FROM_CART:var newState=state.cart.filter(function(product){return product._id!==action._id;});return _objectSpread(_objectSpread({},state),{},{cartOpen:newState.length>0,cart:newState});case CLEAR_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:false,cart:[]});case TOGGLE_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:!state.cartOpen});case UPDATE_CATEGORIES:return _objectSpread(_objectSpread({},state),{},{categories:_toConsumableArray(action.categories)});case UPDATE_CURRENT_CATEGORY:return _objectSpread(_objectSpread({},state),{},{currentCategory:action.currentCategory});// TODO: Add a comment describing what the default case is for\n// Your comment here\n//if the action doesn't match any of the cases, just return state\ndefault:return state;}};export function useProductReducer(initialState){return useReducer(reducer,initialState);}","map":{"version":3,"sources":["C:/Users/rober/UCIBootCamp/redux-store/client/src/utils/reducers.js"],"names":["useReducer","UPDATE_PRODUCTS","ADD_TO_CART","UPDATE_CART_QUANTITY","REMOVE_FROM_CART","ADD_MULTIPLE_TO_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","CLEAR_CART","TOGGLE_CART","reducer","state","action","type","products","cartOpen","cart","product","map","_id","purchaseQuantity","newState","filter","length","categories","currentCategory","useProductReducer","initialState"],"mappings":"+UAAA,OAASA,UAAT,KAA2B,OAA3B,CACA,OACEC,eADF,CAEEC,WAFF,CAGEC,oBAHF,CAIEC,gBAJF,CAKEC,oBALF,CAMEC,iBANF,CAOEC,uBAPF,CAQEC,UARF,CASEC,WATF,KAUO,WAVP,CAYA;AACA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAQC,MAAR,CAAmB,CACxC,OAAQA,MAAM,CAACC,IAAf,EACE;AACA;AACA;AACA,IAAKZ,CAAAA,eAAL,CACE,sCACKU,KADL,MAEEG,QAAQ,oBAAMF,MAAM,CAACE,QAAb,CAFV,GAKF,IAAKZ,CAAAA,WAAL,CACE,sCACKS,KADL,MAEEI,QAAQ,CAAE,IAFZ,CAGEC,IAAI,8BAAML,KAAK,CAACK,IAAZ,GAAkBJ,MAAM,CAACK,OAAzB,EAHN,GAMF,IAAKZ,CAAAA,oBAAL,CACE,sCACKM,KADL,MAEEK,IAAI,8BAAML,KAAK,CAACK,IAAZ,qBAAqBJ,MAAM,CAACE,QAA5B,EAFN,GAIF;AACA;AACA;AACA,IAAKX,CAAAA,oBAAL,CACE,sCACKQ,KADL,MAEEI,QAAQ,CAAE,IAFZ,CAGEC,IAAI,CAAEL,KAAK,CAACK,IAAN,CAAWE,GAAX,CAAe,SAACD,OAAD,CAAa,CAChC,GAAIL,MAAM,CAACO,GAAP,GAAeF,OAAO,CAACE,GAA3B,CAAgC,CAC9BF,OAAO,CAACG,gBAAR,CAA2BR,MAAM,CAACQ,gBAAlC,CACD,CACD,MAAOH,CAAAA,OAAP,CACD,CALK,CAHR,GAWF;AACA;AACA;AACA,IAAKb,CAAAA,gBAAL,CACE,GAAIiB,CAAAA,QAAQ,CAAGV,KAAK,CAACK,IAAN,CAAWM,MAAX,CAAkB,SAACL,OAAD,CAAa,CAC5C,MAAOA,CAAAA,OAAO,CAACE,GAAR,GAAgBP,MAAM,CAACO,GAA9B,CACD,CAFc,CAAf,CAIA,sCACKR,KADL,MAEEI,QAAQ,CAAEM,QAAQ,CAACE,MAAT,CAAkB,CAF9B,CAGEP,IAAI,CAAEK,QAHR,GAMF,IAAKb,CAAAA,UAAL,CACE,sCACKG,KADL,MAEEI,QAAQ,CAAE,KAFZ,CAGEC,IAAI,CAAE,EAHR,GAMF,IAAKP,CAAAA,WAAL,CACE,sCACKE,KADL,MAEEI,QAAQ,CAAE,CAACJ,KAAK,CAACI,QAFnB,GAKF,IAAKT,CAAAA,iBAAL,CACE,sCACKK,KADL,MAEEa,UAAU,oBAAMZ,MAAM,CAACY,UAAb,CAFZ,GAKF,IAAKjB,CAAAA,uBAAL,CACE,sCACKI,KADL,MAEEc,eAAe,CAAEb,MAAM,CAACa,eAF1B,GAKF;AACA;AACA;AACA,QACE,MAAOd,CAAAA,KAAP,CAhFJ,CAkFD,CAnFM,CAqFP,MAAO,SAASe,CAAAA,iBAAT,CAA2BC,YAA3B,CAAyC,CAC9C,MAAO3B,CAAAA,UAAU,CAACU,OAAD,CAAUiB,YAAV,CAAjB,CACD","sourcesContent":["import { useReducer } from 'react';\r\nimport {\r\n  UPDATE_PRODUCTS,\r\n  ADD_TO_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  REMOVE_FROM_CART,\r\n  ADD_MULTIPLE_TO_CART,\r\n  UPDATE_CATEGORIES,\r\n  UPDATE_CURRENT_CATEGORY,\r\n  CLEAR_CART,\r\n  TOGGLE_CART,\r\n} from './actions';\r\n\r\n// TODO: To get a better understand of how a reducer works - add comments to the various actions in the reducer\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    // TODO: Add a comment describing the functionality of the UPDATE_PRODUCTS case\r\n    // Your comment here\r\n    //updates products variable to append a product to the list\r\n    case UPDATE_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        products: [...action.products],\r\n      };\r\n\r\n    case ADD_TO_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: [...state.cart, action.product],\r\n      };\r\n\r\n    case ADD_MULTIPLE_TO_CART:\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, ...action.products],\r\n      };\r\n    // TODO: Add a comment describing the functionality of the UPDATE_CART_QUANTITY case\r\n    // Your comment here\r\n    //goes through the products in the cart and updates the quantity based on action.purchaseQuantity\r\n    case UPDATE_CART_QUANTITY:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: state.cart.map((product) => {\r\n          if (action._id === product._id) {\r\n            product.purchaseQuantity = action.purchaseQuantity;\r\n          }\r\n          return product;\r\n        }),\r\n      };\r\n\r\n    // TODO: Add a comment describing the functionality of the REMOVE_FROM_CART case\r\n    // Your comment here\r\n    // go through state.cart.filter and return a new list and set state.cart equal to that new list of products\r\n    case REMOVE_FROM_CART:\r\n      let newState = state.cart.filter((product) => {\r\n        return product._id !== action._id;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        cartOpen: newState.length > 0,\r\n        cart: newState,\r\n      };\r\n\r\n    case CLEAR_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: false,\r\n        cart: [],\r\n      };\r\n\r\n    case TOGGLE_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: !state.cartOpen,\r\n      };\r\n\r\n    case UPDATE_CATEGORIES:\r\n      return {\r\n        ...state,\r\n        categories: [...action.categories],\r\n      };\r\n\r\n    case UPDATE_CURRENT_CATEGORY:\r\n      return {\r\n        ...state,\r\n        currentCategory: action.currentCategory,\r\n      };\r\n\r\n    // TODO: Add a comment describing what the default case is for\r\n    // Your comment here\r\n    //if the action doesn't match any of the cases, just return state\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function useProductReducer(initialState) {\r\n  return useReducer(reducer, initialState);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}