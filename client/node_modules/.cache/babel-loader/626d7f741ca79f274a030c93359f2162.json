{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rober\\\\UCIBootCamp\\\\redux-store\\\\client\\\\src\\\\components\\\\ProductList\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport ProductItem from '../ProductItem';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport spinner from '../../assets/spinner.gif';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ProductList() {\n  _s();\n\n  const [state, dispatch] = useStoreContext();\n  const {\n    currentCategory\n  } = state;\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS);\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then(products => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Our Products:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), state.products.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-row\",\n      children: filterProducts().map(product => /*#__PURE__*/_jsxDEV(ProductItem, {\n        _id: product._id,\n        image: product.image,\n        name: product.name,\n        price: product.price,\n        quantity: product.quantity\n      }, product._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"You haven't added any products yet!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: spinner,\n      alt: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 18\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProductList, \"5EFEb9FYc1KGyEUAmLNh5IMPtTo=\", false, function () {\n  return [useStoreContext, useQuery];\n});\n\n_c = ProductList;\nexport default ProductList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"sources":["C:/Users/rober/UCIBootCamp/redux-store/client/src/components/ProductList/index.js"],"names":["React","useEffect","ProductItem","useStoreContext","UPDATE_PRODUCTS","useQuery","QUERY_PRODUCTS","idbPromise","spinner","ProductList","state","dispatch","currentCategory","loading","data","type","products","forEach","product","then","filterProducts","filter","category","_id","length","map","image","name","price","quantity"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,OAAP,MAAoB,0BAApB;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AACrB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,eAAe,EAAzC;AAEA,QAAM;AAAES,IAAAA;AAAF,MAAsBF,KAA5B;AAEA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBT,QAAQ,CAACC,cAAD,CAAlC;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,IAAJ,EAAU;AACRH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEX,eADC;AAEPY,QAAAA,QAAQ,EAAEF,IAAI,CAACE;AAFR,OAAD,CAAR;AAIAF,MAAAA,IAAI,CAACE,QAAL,CAAcC,OAAd,CAAuBC,OAAD,IAAa;AACjCX,QAAAA,UAAU,CAAC,UAAD,EAAa,KAAb,EAAoBW,OAApB,CAAV;AACD,OAFD;AAGD,KARD,MAQO,IAAI,CAACL,OAAL,EAAc;AACnBN,MAAAA,UAAU,CAAC,UAAD,EAAa,KAAb,CAAV,CAA8BY,IAA9B,CAAoCH,QAAD,IAAc;AAC/CL,QAAAA,QAAQ,CAAC;AACPI,UAAAA,IAAI,EAAEX,eADC;AAEPY,UAAAA,QAAQ,EAAEA;AAFH,SAAD,CAAR;AAID,OALD;AAMD;AACF,GAjBQ,EAiBN,CAACF,IAAD,EAAOD,OAAP,EAAgBF,QAAhB,CAjBM,CAAT;;AAmBA,WAASS,cAAT,GAA0B;AACxB,QAAI,CAACR,eAAL,EAAsB;AACpB,aAAOF,KAAK,CAACM,QAAb;AACD;;AAED,WAAON,KAAK,CAACM,QAAN,CAAeK,MAAf,CACJH,OAAD,IAAaA,OAAO,CAACI,QAAR,CAAiBC,GAAjB,KAAyBX,eADjC,CAAP;AAGD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGF,KAAK,CAACM,QAAN,CAAeQ,MAAf,gBACC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,gBACGJ,cAAc,GAAGK,GAAjB,CAAsBP,OAAD,iBACpB,QAAC,WAAD;AAEE,QAAA,GAAG,EAAEA,OAAO,CAACK,GAFf;AAGE,QAAA,KAAK,EAAEL,OAAO,CAACQ,KAHjB;AAIE,QAAA,IAAI,EAAER,OAAO,CAACS,IAJhB;AAKE,QAAA,KAAK,EAAET,OAAO,CAACU,KALjB;AAME,QAAA,QAAQ,EAAEV,OAAO,CAACW;AANpB,SACOX,OAAO,CAACK,GADf;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADD,gBAcC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBJ,EAkBGV,OAAO,gBAAG;AAAK,MAAA,GAAG,EAAEL,OAAV;AAAmB,MAAA,GAAG,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,YAAH,GAAyC,IAlBnD;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GA1DQC,W;UACmBN,e,EAIAE,Q;;;KALnBI,W;AA4DT,eAAeA,WAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport ProductItem from '../ProductItem';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_PRODUCTS } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/helpers';\r\nimport spinner from '../../assets/spinner.gif';\r\n\r\nfunction ProductList() {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const { currentCategory } = state;\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products,\r\n      });\r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n    } else if (!loading) {\r\n      idbPromise('products', 'get').then((products) => {\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: products,\r\n        });\r\n      });\r\n    }\r\n  }, [data, loading, dispatch]);\r\n\r\n  function filterProducts() {\r\n    if (!currentCategory) {\r\n      return state.products;\r\n    }\r\n\r\n    return state.products.filter(\r\n      (product) => product.category._id === currentCategory\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"my-2\">\r\n      <h2>Our Products:</h2>\r\n      {state.products.length ? (\r\n        <div className=\"flex-row\">\r\n          {filterProducts().map((product) => (\r\n            <ProductItem\r\n              key={product._id}\r\n              _id={product._id}\r\n              image={product.image}\r\n              name={product.name}\r\n              price={product.price}\r\n              quantity={product.quantity}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <h3>You haven't added any products yet!</h3>\r\n      )}\r\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n"]},"metadata":{},"sourceType":"module"}